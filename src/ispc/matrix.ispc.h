//
// D:/Projects/python/d2p2/src/ispc/matrix.ispc.h
// (Header automatically generated by the ispc compiler.)
// DO NOT EDIT THIS FILE.
//

#pragma once
#include <stdint.h>



#ifdef __cplusplus
namespace ispc { /* namespace */
#endif // __cplusplus

#ifndef __ISPC_ALIGN__
#if defined(__clang__) || !defined(_MSC_VER)
// Clang, GCC, ICC
#define __ISPC_ALIGN__(s) __attribute__((aligned(s)))
#define __ISPC_ALIGNED_STRUCT__(s) struct __ISPC_ALIGN__(s)
#else
// Visual Studio
#define __ISPC_ALIGN__(s) __declspec(align(s))
#define __ISPC_ALIGNED_STRUCT__(s) __ISPC_ALIGN__(s) struct
#endif
#endif


///////////////////////////////////////////////////////////////////////////
// Functions exported from ispc code
///////////////////////////////////////////////////////////////////////////
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
extern "C" {
#endif // __cplusplus
    extern void array_to_float(uint32_t size, float * r, const uint8_t * const x, float scale);
    extern void matrix_add(float * r, const int32_t size, const float * const m0, const float * const m1);
    extern void matrix_mul(float * r, const int32_t r0, const int32_t c0, const int32_t c1, const float * const m0, const float * const m1);
    extern void matrix_muladd(float * r, const int32_t r0, const int32_t c0, const int32_t c1, const float * const m0, const float * const m1, const float * const m2);
    extern float max_p(int32_t size, const float * const x);
    extern float min_p(int32_t size, const float * const x);
    extern void relu(int32_t size, float * r, const float * const x);
    extern void sigmoid(int32_t size, float * r, const float * const x);
    extern void softmax(int32_t size, float * r, const float * const x);
    extern void step(int32_t size, float * r, const float * const x);
    extern float sum(int32_t size, const float * const x);
    extern float to_float(const int32_t n);
    extern float vector_dot(const int32_t size, const float * const v0, const float * const v1);
    extern void vector_dot_batch(float * r, uint32_t batch_size, uint32_t size, const float * const v0, const float * const v1);
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
} /* end extern C */
#endif // __cplusplus


#ifdef __cplusplus
} /* namespace */
#endif // __cplusplus
